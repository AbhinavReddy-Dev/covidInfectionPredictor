# -*- coding: utf-8 -*-
"""covidInfectionRatePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/124bg7O90W8FgfpyIPpMOHuSRx-GJj1PI
"""

#imports
import numpy as np
import matplotlib.pyplot as plt
from sympy import *
import sklearn
from sklearn import metrics
from sklearn.datasets import make_regression
#from sklearn import preprocessing, cross_validation, neighbors
from sklearn import datasets
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn import svm
import pandas as pd
import math
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout

data = pd.read_csv('https://api.covidactnow.org/v2/states.timeseries.csv?apiKey=8f09959c6aeb4c5eae0ecb8369c3b17a')


data.drop(columns=['country'], axis=1)
data.head()

df = data[['date', 'state','actuals.cases', 'actuals.deaths', 'metrics.infectionRate']]

#df['MA'] = df['actuals.cases'].rolling(window=30).mean()
#data = pd.date_range(start = '2020-03', freq = 'M', periods = 11)

'''

df['metrics.infectionRate'] = df['metrics.infectionRate'].fillna(df['metrics.infectionRate'].mean())

df['actuals.cases'] = df['actuals.cases'].fillna(df['actuals.cases'].mean())

df['actuals.deaths'] = df['actuals.deaths'].fillna(df['actuals.deaths'].mean())

df['metrics.infectionRate'] = df['metrics.infectionRate'].fillna(df['metrics.infectionRate'].mean())

'''
for i in range(5):
  df[str(i)] = df['metrics.infectionRate'].shift(i+1)
df = df.dropna()
df

df
df_AK = df[df['state']=='AK']

x = df_AK.iloc[:-1,2:]
y = df_AK.iloc[1:,4]

print(x['metrics.infectionRate'])

x = np.array(x)
y = np.array(y)
print(y[1])
print(x[2])
print(y[2])

x_t, x_test, y_t,y_test = sklearn.model_selection.train_test_split(x,y, test_size = 1/4, random_state = 1338)
'''
sc = StandardScaler()
x_t = sc.fit_transform(x_t)
x_test = sc.transform(x_test)
'''

x_t , y_t = np.array(x_t), np.array(y_t)
x_t = np.reshape(x_t, (x_t.shape[0],x_t.shape[1], 1))
x_t.shape

model = Sequential()

model.add(LSTM(60, return_sequences=True, input_shape = (x_t.shape[1], 1)))
#
#model.add(Dropout(0.5))
model.add(LSTM(60, return_sequences=False))
#model.add(Dropout(0.5))
model.add(Dense(40))
#model.add(Dropout(0.5))
model.add(Dense(1))

model.compile(optimizer = "adam", loss = "mean_squared_error")


model.fit(x_t, y_t, batch_size=20, epochs=20)



x_test , y_test = np.array(x_test), np.array(y_test)
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1], 1))
x_test.shape

yPred = model.predict(x_test)
ypt = model.predict(x_t)





sum = 0
for i in range(len(yPred)):
  sum+=abs(yPred[i]-y_test[i])

print("Validation Error %:")
print(float(sum/len(yPred)/np.mean(y_test)))

sum = 0
for i in range(len(y_t)):
  sum+=np.mean(ypt[i]-y_t[i])
print("Training Error %:")
print(sum/len(y_t)/np.mean(y_t))

states = []
for i in df['state']:
  if( not (i in states)):
    states.append(i)
print(states)



values = []
for i in range(len(states)):
  df_AK = df[df['state']==states[i]]
  x = df_AK.iloc[:-1,2:]
  
  y = df_AK.iloc[1:,4]

  x_t, x_test, y_t,y_test = sklearn.model_selection.train_test_split(x,y, test_size = 1/4, random_state = 1338)
  '''
  sc = StandardScaler()
  x_t = sc.fit_transform(x_t)
  x_test = sc.transform(x_test)
  '''

  x_t , y_t = np.array(x_t), np.array(y_t)
  x_t = np.reshape(x_t, (x_t.shape[0],x_t.shape[1], 1))
  x_t.shape

  model = Sequential()

  model.add(LSTM(60, return_sequences=True, input_shape = (x_t.shape[1], 1)))
  #
  #model.add(Dropout(0.5))
  model.add(LSTM(60, return_sequences=False))
  #model.add(Dropout(0.5))
  model.add(Dense(40))
  #model.add(Dropout(0.5))
  model.add(Dense(1))

  model.compile(optimizer = "adam", loss = "mean_squared_error")


  model.fit(x_t, y_t, batch_size=20, epochs=20)
  x , y = np.array(x), np.array(y)
  x_test = np.reshape(x, (x.shape[0],x.shape[1], 1))


  yPred = model.predict(x_test)
  values.append(yPred[len(yPred)-1])

for i in range(len(values)):
  print('Estimated Infection Rate for the next day', states[i], '=', float(values[i]))
print('State with Highest Estimated Rate = ', states[values.index(max(values))])





